================================================================================
Literals
================================================================================

class E {
  int : Int <- 10;
  bool : Bool <- false;
  string : String <- "foo";
};

--------------------------------------------------------------------------------

(source_file
  (class_item
    name: (type_identifier)
    features: (field_declaration_list
      (attribute_declaration
        name: (identifier)
        type: (type_identifier)
        right: (integer_literal))
      (attribute_declaration
        name: (identifier)
        type: (type_identifier)
        right: (boolean_literal))
      (attribute_declaration
        name: (identifier)
        type: (type_identifier)
        right: (string_literal
          (string_content))))))

================================================================================
Identifiers
================================================================================

class E {
  int() : Int { x };
};

--------------------------------------------------------------------------------

(source_file
  (class_item
    name: (type_identifier)
    features: (field_declaration_list
      (method_declaration
        name: (identifier)
        parameters: (parameters)
        return_type: (type_identifier)
        body: (identifier)))))

================================================================================
Assignment
================================================================================

class E {
  assign() : String {
    foo <- "bar"
  };
};

--------------------------------------------------------------------------------

(source_file
  (class_item
    name: (type_identifier)
    features: (field_declaration_list
      (method_declaration
        name: (identifier)
        parameters: (parameters)
        return_type: (type_identifier)
        body: (assignment_expression
          left: (identifier)
          right: (string_literal
            (string_content)))))))

================================================================================
Dispatch
================================================================================

class E {
  truth() : Bool {
    true
  };
};

class F inherits E {
  truth() : Bool {
    false
  };

  isTrue() : Bool {
    truth() = self@E.truth()
  };
};

--------------------------------------------------------------------------------

(source_file
  (class_item
    name: (type_identifier)
    features: (field_declaration_list
      (method_declaration
        name: (identifier)
        parameters: (parameters)
        return_type: (type_identifier)
        body: (boolean_literal))))
  (class_item
    name: (type_identifier)
    inherits: (type_identifier)
    features: (field_declaration_list
      (method_declaration
        name: (identifier)
        parameters: (parameters)
        return_type: (type_identifier)
        body: (boolean_literal))
      (method_declaration
        name: (identifier)
        parameters: (parameters)
        return_type: (type_identifier)
        body: (binary_expression
          left: (dispatch_expression
            method: (identifier)
            arguments: (arguments))
          right: (dispatch_expression
            value: (self)
            type: (type_identifier)
            method: (identifier)
            arguments: (arguments)))))))

================================================================================
Conditionals
================================================================================

class E {
  cond() : IO {
    {
      if x then
        1
        else if y < 4 then
        z
      else
        false
      fi fi;
    }
  };
};

--------------------------------------------------------------------------------

(source_file
  (class_item
    name: (type_identifier)
    features: (field_declaration_list
      (method_declaration
        name: (identifier)
        parameters: (parameters)
        return_type: (type_identifier)
        body: (block
          (if_expression
            condition: (identifier)
            consequence: (integer_literal)
            alternative: (if_expression
              condition: (binary_expression
                left: (identifier)
                right: (integer_literal))
              consequence: (identifier)
              alternative: (boolean_literal))))))))

================================================================================
Loops
:skip
================================================================================

--------------------------------------------------------------------------------

================================================================================
Blocks
:skip
================================================================================

--------------------------------------------------------------------------------

================================================================================
Let
:skip
================================================================================

--------------------------------------------------------------------------------

================================================================================
Case
:skip
================================================================================

--------------------------------------------------------------------------------

================================================================================
New
:skip
================================================================================

--------------------------------------------------------------------------------

================================================================================
Isvoid
:skip
================================================================================

--------------------------------------------------------------------------------

================================================================================
Arith
:skip
================================================================================

--------------------------------------------------------------------------------
